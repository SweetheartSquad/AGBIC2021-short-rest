/**
format:
{
	sprite: 'obstacle image (uses object key if not set)',
	health: number | undefined,
	armour: number | undefined,
	damage: number | undefined,
	shadow: false | undefined,
	offset: number | undefined, // vertical offset
	bounce: number | undefined, // idle animation
	start: (scene) => {
		// effect triggered when obstacle is encountered
	},
	interact: (scene) => {
		// effect triggered when obstacle is hit
	},
	end: (scene) => {
		// effect triggered when obstacle is killed
	},
}
*/
(() => {
	const cardsAll = [
		'Kindling',
		'Deploy Panic',
		'Reversal',
		'Death Step',
		'Staunch Defender',
		"Coward's Plan",
		'Tactical Grace',
		'Snooze',
		'Teleport',
		'Labelled Potion',
		'Absolve Death',
		'Blessed Rain',
		'Slash',
		'Toxic Vent',
		'Twin Daggers',
		'Magic Blast',
		'Bonk',
		'Death from the Shadows',
		'Exorcise',
		'Vision of Death',
		'Portable Mulligan',
		'Charm Creature',
		'Summon Sprite',
		'Poly Morph',
		'Invoke Augur',
		'Take One For The Team',
		'Steel Layer',
		'Shield Spell',
		'Holy Barrier',
		'Stealth',
		'Jealous Juggle',
		'Bitter Tears',
		'Equalize',
		'Downsize',
		'Confuse',
		'Life Link Locket',
		'Leech Wand',
		'Weaken',
	];
	return {
		door: {
			shadow: false,
			offset: -110,
			interact(scene) {
				scene.sfx('sfx0');
				scene.startCamp();
			},
		},
		shrine: {
			shadow: false,
			offset: -20,
			interact(scene) {
				const o = this;
				const h = scene.getHand();
				if (scene.level < scene.handSize - 2) {
					scene.log(
						'The shrine crumbles before the party, its power already spent.'
					);
					o.animator.setAnimation('shrine_crumble');
					scene.killObstacle();
					scene.shake();
				} else {
					scene.log('The party discovers a powerful shrine.');
					scene.choice(
						{
							name: 'Devotion',
							sprite: 'Exorcise',
							description:
								'Kills a random party member to\nincrease max hand size by 1',
							effect() {
								scene.handSize += 1;
								scene.queue.push(async () => {
									scene.log('The shrine accepts the offer:');
									scene.shake();
									o.animator.setAnimation('shrine_blood');
									scene.overlay([1, 0, 0, 0.5]);
									await scene.delay(2000);
									const p = scene.shuffle(
										scene.party.filter((i) => i.health)
									)[0];
									p.damage(Infinity, true);
									scene.log(`${p.name} is claimed as sacrifice!`);
									scene.sfx('sfx3');
									scene.killObstacle();
								});
							},
						},
						{
							name: 'Piety',
							sprite: 'Kindle',
							description:
								'Burns a random card to\nincrease max hand size by 1',
							canPlay() {
								return h.length;
							},
							effect() {
								scene.handSize += 1;
								scene.queue.push(async () => {
									scene.log('The shrine accepts the offer:');
									scene.shake();
									o.animator.setAnimation('shrine_card');
									scene.overlay([1, 0.5, 0, 0.5]);
									await scene.delay(2000);
									const h2 = scene.getHand();
									const c = scene.shuffle(h2)[0];
									const d = c.def;
									c.def = {
										...c.def,
										canPlay() {
											return true;
										},
										effect() {
											scene.log(`"${c.def.name}" is claimed as sacrifice!`);
											scene.sfx('sfx12');
											scene.killObstacle();
											scene.burnCard({ def: d });
										},
									};
									scene.playCard(c);
								});
							},
						},
						{
							name: 'Heresy',
							sprite: 'No',
							description: 'Ignore the shrine',
							effect() {
								scene.log('The shrine crumbles before the party.');
								scene.shake();
								o.animator.setAnimation('shrine_crumble');
								scene.killObstacle();
							},
						}
					);
				}
			},
		},
		skeleton: {
			name: 'Skelly',
			health: 3,
			damage: 1,
			interact(scene) {
				if (scene.front.name === 'Priest') {
					scene.log('The Priest banishes the skeleton!');
					this.damage(Infinity);
				}
			},
		},
		skeleton_armoured: {
			name: 'Armoured Skelly',
			health: 3,
			armour: 1,
			damage: 1,
			interact(scene) {
				if (scene.front.name === 'Priest') {
					scene.log('The Priest banishes the skeleton!');
					this.damage(Infinity);
				}
			},
		},
		zombie: {
			name: 'Zombie',
			health: 2,
			damage: 1,
			async interact(scene) {
				if (scene.front.name === 'Priest') {
					scene.log('The Priest banishes the zombie!');
					this.damage(Infinity);
				} else if (this.health <= 0) {
					if (Math.random() > 0.5) {
						scene.log('The zombie got back up!');
						scene.addObstacle('zombie');
					}
				}
			},
		},
		necromancer: {
			name: 'The Necromancer',
			health: 4,
			damage: 1,
			async start(scene) {
				scene.music('');
				scene.log('"hee hee hee"');
				await scene.delay(1000);
				scene.addObstacle('skeleton');
				scene.log('"behold! my master has given me power over death!!"');
				await scene.delay(1000);
				scene.announce('The Necromancer');
				scene.music('battle_boss');
			},
			interact(scene) {
				if (!this.health) return;
				if (scene.obstacles.length === 1) {
					scene.log(
						scene.shuffle([
							'"hee hee my minions are endless!!"',
							'"come to me minion!!"',
							'"death shall not stop my minions!!"',
						])[0]
					);
					scene.addObstacle('skeleton');
					scene.obstacles.reverse();
				} else {
					scene.log('"ahgh! minion!! defend me!!!"');
					scene.obstacles.reverse();
				}
			},
			end(scene) {
				scene.log('"noo.. my.. m-minions..."');
				scene.fanfare();
			},
		},
		necromancer2: {
			name: 'The Undead Necromancer',
			sprite: 'necromancer_undead',
			health: 4,
			damage: 1,
			async start(scene) {
				scene.music('');
				scene.log('"hee hee hee"');
				await scene.delay(1000);
				scene.addObstacle('skeleton');
				scene.log('"i told you so! my master has given me power over death!!"');
				await scene.delay(1000);
				scene.announce('The Undead Necromancer');
				scene.music('battle_boss');
			},
			interact(scene) {
				if (!this.health) return;
				if (scene.obstacles.length === 1) {
					scene.log(
						scene.shuffle([
							'"hee hee my minions are endless!!"',
							'"come to me minion!!"',
							'"death shall not stop my minions!!"',
						])[0]
					);
					scene.addObstacle('skeleton');
					scene.obstacles.reverse();
				} else {
					scene.log('"ahgh! minion!! defend me!!!"');
					scene.obstacles.reverse();
				}
			},
			end(scene) {
				scene.log('"master.. why have you forsaken.. your m-minion..."');
				scene.fanfare();
			},
		},
		bat: {
			name: 'Eyebat',
			health: 1,
			damage: 1,
		},
		rat_small: {
			name: 'Rat',
			health: 1,
			damage: 1,
		},
		rat_small2: {
			sprite: 'rat_small',
			name: 'Rat',
			health: 1,
			damage: 1,
			async start(scene) {
				scene.log('"*squeak squeak*"');
				await scene.delay(500);
				scene.addObstacle('rat_small');
				scene.log('The rat called a friend!');
			},
		},
		rat_big: {
			name: 'Big Rat',
			health: 3,
			damage: 1,
		},
		'The Rat Kings': {
			sprite: 'Rat King A',
			name: 'Rat King',
			health: 3,
			damage: 1,
			async start(scene) {
				scene.music('');
				scene.log('"Hey king, I could use a spot check."');
				await scene.delay(2000);
				scene.addObstacle('Rat King B');
				scene.log('"Don\'t hurt yourself king."');
				await scene.delay(2000);
				scene.log('"Kings don\'t let kings fight alone!"');
				scene.addObstacle('Rat King C');
				await scene.delay(2000);
				scene.announce('The Rat Kings');
				scene.music('battle_boss');
			},
			interact() {
				if (scene.obstacles.length > 1) {
					scene.log(
						`"${
							scene.shuffle([
								"Don't worry",
								'Step back',
								'Step aside',
								'My turn',
								'Get behind me',
							])[0]
						} king, I got this."`
					);
					scene.obstacles.push(scene.obstacles.shift());
				}
			},
			end(scene) {
				if (scene.obstacles.length > 0) {
					scene.log('"King! No!! You\'ll pay for that!!!"');
					scene.overlay([1, 0, 0]);
					scene.obstacle.sprBody.tint = 0xff0000;
					scene.obstacle.def = {
						...scene.obstacle.def,
						damage: scene.obstacle.def.damage + 1,
					};
				} else {
					scene.fanfare();
				}
			},
		},
		'Rat King B': {
			name: 'Rat King',
			health: 3,
			damage: 1,
			interact() {
				if (scene.obstacles.length > 1) {
					scene.log(
						`"${
							scene.shuffle([
								"Don't worry",
								'Step back',
								'Step aside',
								'My turn',
								'Get behind me',
							])[0]
						} king, I got this."`
					);
					scene.obstacles.push(scene.obstacles.shift());
				}
			},
			end(scene) {
				if (scene.obstacles.length > 0) {
					scene.log('"King! No!! You\'ll pay for that!!!"');
					scene.overlay([1, 0, 0]);
					scene.obstacle.sprBody.tint = 0xff0000;
					scene.obstacle.def = {
						...scene.obstacle.def,
						damage: scene.obstacle.def.damage + 1,
					};
				} else {
					scene.fanfare();
				}
			},
		},
		'Rat King C': {
			name: 'Rat King',
			health: 3,
			damage: 1,
			interact() {
				if (scene.obstacles.length > 1) {
					scene.log(
						`"${
							scene.shuffle([
								"Don't worry",
								'Step back',
								'Step aside',
								'My turn',
								'Get behind me',
							])[0]
						} king, I got this."`
					);
					scene.obstacles.push(scene.obstacles.shift());
				}
			},
			end(scene) {
				if (scene.obstacles.length > 0) {
					scene.log('"King! No!! You\'ll pay for that!!!"');
					scene.overlay([1, 0, 0]);
					scene.obstacle.sprBody.tint = 0xff0000;
					scene.obstacle.def = {
						...scene.obstacle.def,
						damage: scene.obstacle.def.damage + 1,
					};
				} else {
					scene.fanfare();
				}
			},
		},
		jester: {
			name: 'Jester',
			health: 2,
			damage: 1,
			interact(scene) {
				scene.log('The party gets all mixed up trying to follow the jester!');
				scene.party = scene.shuffle(scene.party);
				scene.party.sort((a, b) => (a.health > 0) - (b.health > 0));
			},
		},
		dragon_junior: {
			name: 'The Immortal Dragon (Junior)',
			health: 3,
			armour: 1,
			damage: 1,
			async start(scene) {
				scene.music('');
				scene.log('"Batter up, nerds!"');
				await scene.delay(2000);
				scene.announce('The Immortal Dragon\n(Junior)');
				scene.music('battle_boss');
			},
			interact(scene) {
				const slot = scene.party.findIndex((i) => i.health > 0);
				if (slot >= 0) {
					scene.log(`${scene.front.name} gets pushed back!`);
					scene.party.splice(slot, 0, scene.party.pop());
				}
				if (this.health) {
					scene.delay(200).then(() => {
						scene.log(
							scene.shuffle([
								'"Get crushed, nerds!"',
								'"Boom! Home run!"',
								'"Bam! Can of corn!"',
								'"Just another changeup, c\'mon!"',
								'"Hit and run!"',
							])[0]
						);
					});
				}
			},
			end(scene) {
				scene.log('"Third.. strike..."');
				scene.fanfare();
			},
		},
		mushroom: {
			name: 'Gloopy Gus',
			health: 3,
			async start(scene) {
				scene.music('');
				scene.log('"*gloop gloop*"');
				await scene.delay(2000);
				scene.announce('Gloopy Gus');
				scene.music('battle_boss');
			},
			interact(scene) {
				scene.log('Gloopy Gus released poisonous spores!');
				scene.party.forEach((i) => i.damage(1));
				scene.overlay([0.6, 0.8, 0, 0.6], 1000);
			},
			end(scene) {
				scene.fanfare();
			},
		},
		doppelgangers: {
			name: 'Doppelgangers',
			sprite: 'mirror',
			shadow: false,
			offset: -45,
			start(scene) {
				scene.music('');
			},
			interact(scene) {
				scene.announce('Doppelgangers');
				scene.music('battle_boss');
				scene.killObstacle();
				const end = () => {
					if (!scene.enemy) scene.fanfare();
				};
				scene.party
					.filter((i) => i.health)
					.forEach((i) => {
						const o = scene.addObstacle({
							name: `${i.name} Doppelganger`,
							sprite: i.sprBody.texture.textureCacheIds[0],
							damage: i.damageOutput,
							health: i.health,
							armour: i.armour,
							end,
						});
						o.sprBody.scale.x = -1;
						o.sprOL.scale.x = -1;
					});
			},
		},
		treasure: {
			start() {
				// play a sound?
			},
			interact(scene) {
				scene.log('The party finds a chest!');
				const o = this;
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Open',
						effect() {
							scene.sfx('sfx6');
							scene.kick(-5);
							scene.queue.push(async () => {
								o.animator.setAnimation('treasure_open');
								await scene.delay(100);
								if (Math.random() < 1.1 - scene.level * 0.1) {
									const numCards =
										scene.level >= 3 && Math.random() > 0.5 ? 2 : 3;
									// TODO: loot pools?
									scene.loot(
										new Array(numCards)
											.fill()
											.map(() => scene.shuffle(cardsAll)[0])
									);
									scene.killObstacle(o);
								} else {
									scene.killObstacle(o);
									scene.log('The chest bursts to life and attacks!');
									scene.front.damage(1);
									scene.addObstacle('mimic');
								}
							});
						},
					},
					{
						sprite: 'No',
						name: "Don't Open",
						effect() {
							scene.killObstacle(o);
						},
					}
				);
			},
		},
		mimic: {
			sprite: 'treasure_mimic',
			name: 'Mimic',
			health: 2,
			damage: 1,
		},
		slime_big: {
			name: 'Big Slime',
			health: 5,
			damage: 1,
			async start(scene) {
				scene.log('"*blub blub*"');
				await scene.delay(2000);
				scene.announce('Big Slime');
				scene.music('battle_boss');
			},
			interact(scene) {
				if (scene.front.name === 'Knight' || scene.front.name === 'Rogue') {
					scene.log('The blade splits the slime in two!');
					scene.addObstacle('slime_medium');
				}
			},
			end(scene) {
				scene.fanfare();
			},
		},
		slime_medium: {
			name: 'Slime',
			health: 2,
			damage: 1,
			interact(scene) {
				if (scene.front.name === 'Knight' || scene.front.name === 'Rogue') {
					scene.log('The blade splits the slime in two!');
					scene.addObstacle('slime_small');
				}
			},
		},
		slime_small: {
			name: 'Small Slime',
			health: 1,
			damage: 1,
		},
		fountain: {
			shadow: false,
			offset: -50,
			interact(scene) {
				scene.log('The party considers slaking their thirst.');
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Slake',
						effect() {
							scene.sfx('sfx2');
							if (Math.random() < 1 / 3) {
								// poison
								scene.obstacle.animator.setAnimation('fountain_poison');
								scene.party.forEach((i) => {
									i.damage(1, true);
								});
								scene.overlay([0.6, 0.8, 0, 0.6], 500);
								scene.log('The party drinks, and retches moments later.');
							} else {
								// healing
								scene.party.forEach((i) => {
									if (i.health > 0) {
										i.heal(Infinity);
									}
								});
								scene.overlay([0, 0.8, 1, 0.6], 500);
								scene.log('The party drinks, and feels refreshed.');
							}
							scene.killObstacle();
						},
					},
					{
						sprite: 'No',
						name: "Don't Slake",
						effect() {
							scene.log('The party suppresses their thirst.');
							scene.killObstacle();
						},
					}
				);
			},
		},
		potion: {
			interact(scene) {
				const o = this;
				scene.log(
					`${scene.front.name} finds an unlabelled bottle filled with liquid.`
				);
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Quaff',
						effect() {
							scene.sfx('sfx2');
							if (Math.random() < 0.1) {
								scene.killObstacle(o);
								scene.log('The bottle bursts to life and attacks!');
								scene.front.damage(1);
								scene.addObstacle('potion_mimic');
							} else if (Math.random() < 1 / 3) {
								// poison
								o.animator.setAnimation('potion_poison');
								scene.front.damage(1, true);
								scene.overlay([0.6, 0.8, 0, 0.6], 500);
								scene.log('They drink, and retch moments later.');
								scene.killObstacle(o);
							} else {
								// healing
								o.animator.setAnimation('potion_empty');
								scene.party.forEach((i) => {
									scene.front.heal(i.maxHealth);
								});
								scene.overlay([0, 0.8, 1, 0.6], 500);
								scene.log('They drink, and feel refreshed.');
								scene.killObstacle(o);
							}
						},
					},
					{
						sprite: 'No',
						name: 'Discard',
						effect() {
							scene.log('They toss it away.');
							scene.killObstacle();
						},
					}
				);
			},
		},
		potion_mimic: {
			name: 'Potion Mimic',
			health: 2,
			damage: 1,
		},
		mini_camp: {
			shadow: false,
			offset: -30,
			interact(scene) {
				const o = this;
				const hand = scene.getHand();
				scene.log("The party finds the remnants of another party's camp.");
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Relight',
						description: 'Burn a card from your hand to take a power nap',
						canPlay() {
							return hand.length > 0;
						},
						effect() {
							scene.sfx('sfx4');
							scene.clearHand();
							hand.forEach((i, idx) => {
								scene.addCard({
									...i.def,
									description: `Burn "${i.def.name}"\n\n${i.description}`,
									canPlay: undefined,
									effect: () => {
										scene.sfx('sfx12');
										o.animator.setAnimation('mini_camp_lit');
										scene.log(
											`The party burns "${i.def.name}" along with the rest of the fire.`
										);
										const dead = scene.party.filter((p) => !p.health);
										if (dead.length > 0) {
											scene.log(
												`${scene.andList(
													dead.map((p) => p.name)
												)} revived by the fire with 1HP.`
											);
										}
										scene.party.forEach((p) => {
											p.heal(1);
										});
										scene.overlay([1, 0.5, 0, 0.5]);
										scene.burnCard(i);
										hand.splice(idx, 1);
										scene.clearHand();
										hand.forEach((c) => {
											scene.addCard(c.def);
										});
										scene.addCard('Advance');
										scene.killObstacle(o);
									},
								});
							});
							scene.addCard({
								name: 'Forget it',
								sprite: "Coward's Plan",
								variant: 'ui',
								effect() {
									scene.clearHand();
									hand.forEach((c) => {
										scene.addCard(c.def);
									});
									scene.addCard('Advance');
									scene.killObstacle(o);
								},
							});
						},
					},
					{
						sprite: 'No',
						name: 'Leave it alone',
						effect() {
							scene.killObstacle(o);
						},
					}
				);
			},
		},
		fortune_teller: {
			bounce: 1,
			interact(scene) {
				const o = this;
				const heal = (name) => ({
					name: `Heal ${name}`,
					sprite: name,
					variant: 'instant',
					effect() {
						scene.party.find((i) => i.name === name);
						scene.whiteout();
					},
				});
				// TODO: full readings
				const readings = scene.shuffle([
					[
						'Kindling',
						'"The Fool! Every flame must begin with a spark after all..."',
					],
					[
						heal('Mage'),
						'"The Magician! Well, I suppose one among you is already familiar with this one?"',
					],
					[
						'Holy Barrier',
						'"The High Priestess! Do not let this sway you. Do not let me sway you."',
					],
					[
						'Summon Sprite',
						'"The Empress! Oh, but they grow up so fast, don\'t they?"',
					],
					[
						'Downsize',
						'"The Emperor! Well well, you set the rules now, don\'t you?"',
					],
					[
						'Invoke Augur',
						'"The Hierophant! What better teacher than the thirst for knowledge?"',
					],
					[
						'Life Link Locket',
						'"The Lovers! An unbreakable bond, I see that you\'ll forge it soon."',
					],
					['Teleport', '"The Chariot! Best not to wait around, eh?"'],
					[
						'Equalize',
						'"Justice! Your sword will swing true, and so will your foe\'s. What will happen, will happen."',
					],
					[
						'Snooze',
						'"The Hermit! Sometimes we must step back to see what is ahead of us."',
					],
					[
						'Deploy Panic',
						'"Wheel of Fortune! I\'d wish you luck, but I know that it won\'t matter."',
					],
					[heal('Knight'), '"Strength!"'],
					[
						'Take One For The Team',
						'"The Hanged Man! Perhaps you need to give something up to gain what you desire?"',
					],
					[
						'Vision of Death',
						'"Death! But not necessarily your own... perhaps you should take this to who it belongs."',
					],
					['Blessed Rain', '"Temperance! Continue and persevere!"'],
					['Charm Creature', '"The Devil!"'],
					[
						{
							name: 'The Tower',
							sprite: 'Death from the Shadows',
							variant: 'instant',
							effect() {
								scene.front.damage(Infinity);
								scene.blackout();
							},
						},
						'"The Tower! Terrible card. I hope you can withstand its omen..."',
					],
					[heal('Priest'), '"The Star! It is truly your time to shine!"'],
					[
						heal('Rogue'),
						'"The Moon! Not often someone resonates as powerfully as you do."',
					],
					[
						'Tactical Grace',
						'"The Sun! Seize the day, it\'s yours for the taking!"',
					],
					[
						'Bitter Tears',
						'"Judgement! But are you here to deliver or to receive?"',
					],
					[
						'Reversal',
						'"The World! Continue forward! The end of your journey nears!"',
					],
				]);
				const numReadings = 3;
				scene.log('"Welcome! Would you like a reading?"');
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Okay',
						async effect() {
							scene.queue.push(async () => {
								scene.log('"Alright, let me just shuffle here..."');
								await scene.delay(2000);
							});
							for (let i = 0; i < numReadings; ++i) {
								const reading = readings.pop();
								scene.queue.push(async () => {
									scene.log('"Let\'s see..."');
									await scene.delay(1000);
									scene.log(reading[1]);
									await scene.delay(2000);
								});
								await scene.loot([reading[0]]);
							}
							scene.queue.push(async () => {
								scene.log(
									'"That\'s all for now. I hope you make good use of it."'
								);
								await scene.delay(1000);
								scene.log('"Good luck!"');
								scene.killObstacle(o);
							});
						},
					},
					{
						sprite: 'No',
						name: 'No thanks',
						effect() {
							scene.log('"Your loss!"');
							scene.killObstacle(o);
						},
					}
				);
			},
		},
		dealer: {
			bounce: 1,
			interact(scene) {
				const o = this;
				const h = scene.getHand();
				const win = {
					name: 'Ding!',
					sprite: 'Yes',
					variant: 'instant',
					async effect() {
						scene.log('"Drat- uh- I mean, congratulations!"');
						await scene.delay(1000);
						scene.drawCard();
						scene.log('"Now scram!"');
						scene.killObstacle(o);
					},
				};
				const lose = {
					name: 'Bzzt!',
					sprite: 'No',
					variant: 'instant',
					async effect() {
						scene.log('"Oops! Better luck next time!"');
						await scene.delay(1000);
						scene.log('"I\'ll just be taking that..."');
						await scene.delay(1000);
						const c = scene.shuffle(scene.getHand())[0];
						scene.burnCard(c);
						c.def = {
							...c.def,
							canPlay() {
								return true;
							},
							effect() {
								scene.sfx('sfx12');
							},
						};
						scene.playCard(c);
						scene.log(`"${c.def.name}" is taken as payment!`);
						await scene.delay(500);
						scene.log('"Now scram!"');
						scene.killObstacle(o);
					},
				};
				scene.log('"Welcome! Can I interest you in a game of chance?"');
				scene.choice(
					{
						sprite: 'Yes',
						name: 'Why not?',
						description: 'Risk a card for a chance to draw another',
						canPlay() {
							return h.length;
						},
						effect() {
							scene.log('"Pick a card, any card!"');
							scene.loot([lose, win, win], 1);
						},
					},
					{
						sprite: 'No',
						name: 'Rather not',
						effect() {
							scene.log('"Then scram! And don\'t push your luck!"');
							scene.killObstacle(o);
						},
					}
				);
			},
		},
		trap: {
			shadow: false,
			offset: -50,
			async interact(scene) {
				if (scene.front.name === 'Rogue') {
					scene.log('The Rogue disables the trap.');
					this.transform.y += 10;
					await scene.delay(200);
					scene.killObstacle();
				} else {
					scene.log('A trap is sprung!');
					scene.sfx('sfx2');
					this.animator.setAnimation('trap_triggered');
					this.transform.y += 10;
					scene.front.damage(Infinity);
					await scene.delay(200);
					scene.killObstacle();
				}
			},
		},
		bomb: {
			sprite: 'bomb_c',
			health: 3,
			interact(scene) {
				if (this.countdown === undefined) {
					this.countdown = 3;
				}
				this.countdown -= 1;
				if (this.countdown) {
					this.animator.setAnimation(
						`bomb_${['a', 'b', 'c'][this.countdown - 1]}`
					);
				} else {
					scene.log('The bomb goes off!');
					this.animator.setAnimation('bomb');
					scene.whiteout();
					scene.front.damage(Infinity);
				}
			},
		},
		dragon: {
			name: 'The Immortal Dragon',
			health: 10,
			damage: 1,
			async start(scene) {
				scene.music('');
				scene.log('"TODO: some sort of intro taunt!"');
				await scene.delay(2000);
				await scene.addObstacle('dragon_hand');
				scene.whiteout();
				scene.announce('The Dragon');
				scene.music('battle_boss');
				scene.tween(scene.containerParty.scale, 'x', 0.6, 0);
				scene.tween(scene.containerParty.scale, 'y', 0.6, 0);
				scene.tween(scene.containerParty.pivot, 'x', -40, 0);
			},
			end(scene) {
				scene.log('"NOOO!!"');
				scene.whiteout();
				scene.tween(scene.containerParty.scale, 'x', 1, 0);
				scene.tween(scene.containerParty.scale, 'y', 1, 0);
				scene.tween(scene.containerParty.pivot, 'x', 0, 0);
				scene.fanfare();
			},
			async interact(scene) {
				if (!this.health) return;
				if (scene.obstacles.length === 1) {
					await scene.addObstacle('dragon_hand');
					scene.log(
						`"${[
							scene.shuffle(['', 'Gah!', 'Argh!', 'Hrrg!', '*HISS*'])[0],
							scene.shuffle([
								'',
								'How dare you!',
								'You DARE!?',
								'Insolent!',
								"I'll get you for that!",
							])[0],
						]
							.filter((i) => i)
							.join(' ')}"`
					);
				}
			},
		},
		dragon_hand: {
			name: "Dragon's Hand",
			sprite: 'dragon_hand',
			health: 1,
			damage: 2,
			shadow: false,
		},
	};
})();
