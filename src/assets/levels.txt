/**
format:
[level]: (scene) => {
	return [{
		icon: 'map icon image',
		obstacles: [
			'obstacle name', // see obstacles.txt for list
			{
				// unique hard-coded obstacle; see obstacles.txt for format
			}
		]
	}]
}
*/
(() => {
	// cards
	const initialDeck = [
		'Kindling',
		'Shuffle',
		'Snooze',
		'Labelled Potion',
		'Slash',
		'Twin Daggers',
		'Magic Blast',
		'Bonk',
		'Holy Barrier',
	];

	// obstacles
	const basic = [['bat'], ['rat_small'], ['slime_small']];
	const tough = [
		['bat', 'bat'],
		['rat_small', 'bat'],
		['bat', 'rat_small'],
		['rat_small', 'rat_small'],
		['skeleton'],
		['skeleton_armoured'],
		['rat_big'],
		['zombie'],
		['slime_medium'],
		['bomb'],
	];
	const encounter = [
		['fountain'],
		['treasure'],
		['potion'],
		['fortune_teller'],
		['mini_camp'],
		['trap'],
	];
	const minibosses = [
		['mushroom'],
		['skeleton', 'necromancer'],
		['Rat King A', 'Rat King B', 'Rat King C'],
		['slime_big'],
	];
	return {
		0: (scene) => {
			scene.setBg('bg_forest');
			scene.setFg('fg');
			scene.addCard('Advance');
			scene.addParty({ name: 'Mage', spr: 'frog', maxHealth: 2 });
			scene.addParty({ name: 'Priest', spr: 'cat', maxHealth: 3 });
			scene.addParty({
				name: 'Rogue',
				spr: 'apple',
				maxHealth: 2,
				damage: 2,
			});
			scene.addParty({ name: 'Knight', spr: 'onion', maxHealth: 4 });
			initialDeck.forEach((i) => scene.addDeck(i));

			if (scene.started) {
				// skip tutorial
				scene.log('wow look at us skipping the tutorial areas');
				return [
					{
						icon: 'icon_cleared',
					},
					{
						icon: 'icon_door',
						obstacles: ['door'],
					},
				];
			}
			scene.started = true;
			scene.log('Wow look at us travelling through a forest');
			return [
				{
					icon: 'icon_unknown',
				},
				{
					icon: 'icon_unknown',
					obstacles: [
						{
							sprite: 'blank',
							start(scene) {
								scene.log('We are totally outside a dungeon');
								scene.killObstacle();
							},
						},
					],
				},
				{
					icon: 'icon_enemy',
					obstacles: [
						{
							sprite: 'error',
							health: 1,
							damage: 1,
							start(scene) {
								scene.log('Hello i am a tutorial enemy, kill me plz');
							},
							end(scene) {
								scene.log('i hurt you but died, goodbye');
							},
						},
					],
				},
				{
					icon: 'icon_unknown',
					obstacles: [
						{
							sprite: 'error',
							start(scene) {
								scene.log('Hello i am a card tutorial, try to hit me');
							},
							interact(scene) {
								if (this.interacted) {
									scene.log(
										'hello i am hint text telling you to use the card, not advance'
									);
								} else {
									this.interacted = true;
									scene.addCard({
										name: 'tutorial heal',
										effect(scene) {
											scene.front.heal(1);
											scene.killObstacle();
											scene.log(
												'good job i am saying goodbye and getting out of the way'
											);
										},
									});
									scene.log('hello i am telling you to heal yourself');
								}
							},
						},
					],
				},
				{
					icon: 'icon_door',
					obstacles: [
						{
							sprite: 'blank',
							start() {
								scene.log(
									"oh what's this a door? surely it could not be the entrance to a dungeon and perhaps our last chance to take a short rest"
								);
								scene.killObstacle();
							},
						},
						'door',
					],
				},
			];
		},
		1: (scene) => {
			scene.setBg('bg');
			scene.setFg('fg');
			scene
				.delay(1000)
				.then(() => {
					scene.log('A resounding voice echoes around you:');
					return scene.delay(1000);
				})
				.then(() => {
					scene.log(
						`"BWAHAHA!! WELCOME... TO YOUR ${
							scene.shuffle(['DOOM', 'DEATH', 'DEMISE', 'DOWNFALL'])[0]
						}!!!"`
					);
				});
			const areas = [
				{
					icon: 'icon_camp',
				},
			];
			// TODO: real level generation
			areas.push(
				{
					icon: 'icon_enemy',
					obstacles: scene.shuffle(basic)[0],
				},
				{
					icon: 'icon_enemy',
					obstacles: scene.shuffle(tough)[0],
				},
				{
					icon: 'icon_unknown',
					obstacles: scene.shuffle(encounter)[0],
				},
				{
					icon: 'icon_boss',
					obstacles: scene.shuffle(minibosses)[0],
				}
			);
			areas.push({
				icon: 'icon_door',
				obstacles: ['door'],
			});
			return areas;
		},
		2: (scene) => {
			scene.setBg('bg_alternate');
			const areas = [
				{
					icon: 'icon_camp',
				},
			];
			areas.push({
				icon: 'icon_boss',
				obstacles: ['dragon'],
			});
			areas.push({
				icon: 'icon_door',
				obstacles: ['door'],
			});
			return areas;
		},
		3: (scene) => {
			const areas = [
				{
					icon: 'icon_camp',
				},
			];
			// TODO: endgame
			return areas;
		},
	};
})();
